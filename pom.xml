<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- POM.model의 버전 -->
	<modelVersion>4.0.0</modelVersion>
	<!-- 프로젝트의 계층 정보 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<!-- 프로젝트를 생성하는 조직의 고유 아이디를 결정. 일반적으로 도메인 이름을 거꾸로 작성 -->
	<groupId>kr.letech</groupId>
	<!-- 프로젝트 빌드 시 파일 대표이름. groupId 내에서 유일해야 한다. Maven을 이용하여 빌드시 다음과 같은 규칙으로 
		파일이 생성된다. -->
	<artifactId>boot_board</artifactId>
	<!-- 프로젝트의 현재 버전, 개발 중일때는 SNAPSHOT을 접미사로 사용 -->
	<version>0.0.1-SNAPSHOT</version>
	<!-- 프로젝트, 프로젝트 이름 -->
	<name>boot_board</name>
	<!-- 프로젝트에 대한 간략한 설명 -->
	<description>letech study : spring boot board</description>


	<properties>
		<!-- jdk 버전 -->
		<java.version>1.8</java.version>
	</properties>


	<!-- 프로젝트와 의존 관계에 있는 라이브러리들을 관리 -->
	<dependencies>
		<!-- spring boot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- spring security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>


		<!-- jsper, jstl을 의존성에 추가해야 jsp파일의 구동이 가능 -->
		<!-- jasper -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>


		<!-- devtools -->
		<!-- 부트는 스프링과 다르게 동적 파일들의 파일 변경을 자동으로 반영하지 않는다. -->
		<!-- 기존 스프링과 동일하게 반영하기 위해 devtools를 추가 -->
		<!-- 추가 후 application.properties에 내용 추가 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!-- maria db -->
		<!-- 추가 후 application.properties에 내용 추가 -->
		<dependency>
		<groupId>org.mariadb.jdbc</groupId>
		<artifactId>mariadb-java-client</artifactId>
		</dependency>
		<dependency>
		<groupId>org.mybatis.spring.boot</groupId>
		<artifactId>mybatis-spring-boot-starter</artifactId>
		<version>2.1.1</version>
		</dependency>
		
		
			
		<!-- tiles(jstl 필요) -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>3.0.7</version>
		</dependency>
		
		



		<!-- fileupload -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.4</version>
		</dependency>
		
	</dependencies>


	<!-- 빌드에 사용 할 플러그인 목록 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>
